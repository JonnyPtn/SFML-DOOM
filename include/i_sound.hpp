////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file   src\i_sound.hpp.
///
/// \brief  Declares the i_sound interface.
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <memory>
#include <map>
#include <list>

#include <SFML/Audio.hpp>

#include "p_mobj.hpp"
#include "sounds.hpp"
#include "timidity/timidity.h"

// when to clip out sounds
// Does not fit the large outdoor areas.
#define S_CLIPPING_DIST		(1200*0x10000)

// Distance tp origin when sounds should be maxed out.
// This should relate to movement clipping resolution
// (see BLOCKMAP handling).
// Originally: (200*0x10000).
#define S_CLOSE_DIST		(160*0x10000)


#define S_ATTENUATOR		((S_CLIPPING_DIST-S_CLOSE_DIST)>>FRACBITS)

#define NORM_PITCH     		128

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class  ISound
///
/// \brief  Sound Interface
////////////////////////////////////////////////////////////////////////////////////////////////////
class I_Sound
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::initialise();
    ///
    /// \brief  Initializes the sound module.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    static void initialise();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::shutdown();
    ///
    /// \brief  Shutdown sound module.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    static void shutdown();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::playMusic( const std::string& handle, bool looping);
    ///
    /// \brief  Play music by name
    ///
    /// \param  handle  The music name.
    /// \param  looping Loop flag.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    static void playMusic( const std::string&   handle, bool looping);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::playMusic(const int musicNum, bool looping);
    ///
    /// \brief  Play music by index
    ///
    /// \param  musicNum    The music number.
    /// \param  looping     True to looping.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void playMusic(const int	musicNum, bool looping = false);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static int I_Sound::I_GetSfxLumpNum(sfxinfo_t* sfxinfo);
    ///
    /// \brief  Retrieve the raw data lump index for a given SFX name.
    ///
    /// \param [in,out] sfxinfo If non-null, the sfxinfo to get the lump number for.
    ///
    /// \return The sfx lump number.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    static int getSfxLumpNum(sfxinfo_t* sfxinfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::setMusicVolume(int volume);
    ///
    /// \brief  Sets music volume.
    ///
    /// \param  volume  The volume.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void setMusicVolume(int volume);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static int I_Sound::getMusicVolume();
    ///
    /// \brief  Gets music volume.
    ///
    /// \return The music volume.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static int getMusicVolume();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::stopAllSounds();
    ///
    /// \brief  Stops all sounds.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void stopAllSounds();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn void I_Sound::I_Sound::startSoundAtVolume( void* origin, int sound_id);
    ///
    /// \brief  Starts a sound.
    ///
    /// \param [in,out] origin      If non-null, the origin.
    /// \param          sound_id    Identifier for the sound.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void startSound( void* origin, int sound_id, int volume = snd_SfxVolume);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::pauseSound();
    ///
    /// \brief  Pause sound.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void pauseSound();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::resumeSound();
    ///
    /// \brief  Resume sound.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void resumeSound();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::stopSound(void* origin);
    ///
    /// \brief  Stops a sound.
    ///
    /// \param [in,out] origin  If non-null, the origin.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    static void stopSound(void* origin);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::S_UpdateSounds(mobj_t*);
    ///
    /// \brief  Updates the sounds.
    ///
    /// \param [in,out] parameter1  Pointer to the current listener.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void S_UpdateSounds(mobj_t*);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::setSfxVolume(int volume);
    ///
    /// \brief  Sets sfx volume.
    ///
    /// \param  volume  The volume.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static void setSfxVolume(int volume);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn static void I_Sound::getSfxVolume();
    ///
    /// \brief  Gets sfx volume.
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static int getSfxVolume();

private:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \fn int I_Sound::Mus2Midi(unsigned char* bytes, unsigned char* out, int* len);
    ///
    /// \brief  Converts the MUS format found in original doom WADs into proper midi format
    ///
    ///
    /// \param [in,out] bytes   If non-null, the bytes.
    /// \param [in,out] out     If non-null, the out.
    /// \param [in,out] len     If non-null, the length.
    ///
    /// \return An int.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    static int Mus2Midi(unsigned char* bytes, unsigned char* out, int* len);

    /// \brief  The doom music
    static MidiSong*				                doomMusic;
    /// \brief  The music sound
    static std::unique_ptr<sf::Sound>              musicSound;
    /// \brief  Buffer for music sound data
    static std::unique_ptr<sf::SoundBuffer>        musicSoundBuffer;
    /// \brief  Buffer for music data
    static char*                                   musicBuffer;
    /// \brief  The sound sfx volume
    static int                                     snd_SfxVolume;
    /// \brief  The sound music volume
    static int                                     snd_MusicVolume;
    /// \brief  The sound buffers
    static std::map<std::string, std::unique_ptr<sf::SoundBuffer>> soundBuffers;
    /// \brief  The sounds and their origins
    static std::list<std::pair<std::unique_ptr<sf::Sound>,void*> >	sounds;

};
